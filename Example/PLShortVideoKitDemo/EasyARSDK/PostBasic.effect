{
	"name" : "basic",
	"attributes" : {
		"aPosition" : "geometry[${geometryUuid}].position",
		"aUv"       : "geometry[${geometryUuid}].uv"
	},
	"uniforms" : {
		"uColorBufferWidth"           : {
			"binding"       : "material[${materialUuid}].colorBufferWidth"
		}, 
		"uColorBufferHeight"           : {
			"binding"       : "material[${materialUuid}].colorBufferHeight"
		}, 
		"uColorBuffer"           : {
			"binding"       : "material[${materialUuid}].colorBuffer",
			"wrapMode"      : "clamp",
			"textureFilter" : "linear",
			"mipFilter"     : "linear"
		}, 
		"uGeometryBufferWidth"           : {
			"binding"       : "material[${materialUuid}].geometryBufferWidth"
		}, 
		"uGeometryBufferHeight"           : {
			"binding"       : "material[${materialUuid}].geometryBufferHeight"
		}, 
		"uGeometryBuffer"           : {
			"binding"       : "material[${materialUuid}].geometryBuffer",
			"wrapMode"      : "clamp",
			"textureFilter" : "linear",
			"mipFilter"     : "linear"
		}
	},
	"macros" : {
		"HAS_COLOR_BUFFER"       : "material[${materialUuid}].colorBuffer",
		"HAS_GEOMETRY_BUFFER"    : "material[${materialUuid}].geometryBuffer"
	}, 
	"techniques" : [{
		"passes" : [{
			"states" : {
    				"depthMask"                 : false,
    				"depthFunction"             : "always",
    				"triangleCulling"           : "none"
			},
		"vertexShader" : "
			#ifdef GL_ES
				precision mediump float;
			#endif
 
			attribute vec3 aPosition;
			attribute vec2 aUv;
 
			varying vec2 vVertexUv;
 
			void main(void)
			{
				vVertexUv = vec2(aUv.x, 1. - aUv.y);
 
				gl_Position = vec4(aPosition, 1) * vec4(1., 1., 1., .5);
			}
		",
		"fragmentShader" : "
			#ifdef GL_ES
				precision mediump float;
			#endif

			#ifdef HAS_COLOR_BUFFER
			uniform sampler2D uColorBuffer;
			uniform float uColorBufferWidth;
			uniform float uColorBufferHeight;
			#endif

			#ifdef HAS_GEOMETRY_BUFFER
			uniform sampler2D uGeometryBuffer;
			uniform float uGeometryBufferWidth;
			uniform float uGeometryBufferHeight;
			#endif
 
			varying vec2 vVertexUv;
 
			void main()
			{
				vec4 pixel = vec4(1,1,1,1);

				#ifdef HAS_COLOR_BUFFER
				pixel = texture2D(uColorBuffer, vVertexUv);
				#endif
 
				gl_FragColor = pixel;
			}
		"
		}]
	}]
}
